usethis::create_package(".")
install.packages("devtools")
install.packages("usethis")
install.packages("roxygen2")
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
# 生成测试数据
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000)
)
# 调用暴力求解函数
result <- brute_force_knapsack(knapsack_objects[1:8,], W = 3500)
# 输出结果
print(result)
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
> # 生成测试数据
# 生成测试数据
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000)
)
# 调用暴力求解函数
result <- brute_force_knapsack(knapsack_objects[1:8,], W = 3500)
# 输出结果
print(result)
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000)
)
# 打印前8行的数据
print(knapsack_objects[1:8,])
brute_force_knapsack(x = knapsack_objects[1:12,], W = 3500)
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
# 设置随机种子，确保结果可重复
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000  # 物品数量
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),  # 随机生成重量
v = runif(n = n, 0, 10000)  # 随机生成价值
)
# 测试函数
result <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
# 打印结果
print(result)
for (i in 0:(2^n - 1)) {
selected <- as.logical(intToBits(i)[1:n])
total_weight <- sum(x$w[selected])
total_value <- sum(x$v[selected])
# 输出每个组合的重量和值
print(paste("Combination:", toString(which(selected)), "Weight:", total_weight, "Value:", total_value))
if (total_weight <= W && total_value > best_value) {
best_value <- total_value
best_combination <- which(selected)
}
}
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
# 设置随机种子，确保结果可重复
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000  # 物品数量
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),  # 随机生成重量
v = runif(n = n, 0, 10000)  # 随机生成价值
)
# 测试函数
result <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
# 打印结果
print(result)
for (i in 0:(2^n - 1)) {
selected <- as.logical(intToBits(i)[1:n])
total_weight <- sum(x$w[selected])
total_value <- sum(x$v[selected])
# 输出每个组合的重量和值
print(paste("Combination:", toString(which(selected)), "Weight:", total_weight, "Value:", total_value))
if (total_weight <= W && total_value > best_value) {
best_value <- total_value
best_combination <- which(selected)
}
}
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
source("~/workspace/github/knapsack/R/brute_force_knapsack.R")
RNGversion(min(as.character(getRversion()),"3.5.3"))
Warning in RNGkind("Mersenne-Twister", "Inversion", "Rounding"): non-uniform ’Rounding’
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
brute_force_knapsack(x = knapsack_objects[1:12,], W = 3500)
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack(x = knapsack_objects[1:8,], W = 2000)
> result <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
result <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
# 打印结果
print(result)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:12,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:12,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
# 获取最佳价值和物品索引
best_value <- dp[n, W + 1]
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
best_combination <- integer(0)
#' Solve the Knapsack Problem using Dynamic Programming
#'
#' This function solves the knapsack problem using dynamic programming.
#' It constructs a table to store the maximum value for each weight capacity.
#' The result is obtained by iterating over all items and weights.
#'
#' @param x A data frame with two columns: \code{v} for values and \code{w} for weights.
#'          Each row represents an item with a value and a weight.
#' @param W A positive numeric value representing the maximum weight capacity of the knapsack.
#'
#' @return A list with two elements:
#'   \item{value}{The maximum total value of the knapsack.}
#'   \item{elements}{The indices of the items in \code{x} that make up the optimal solution.}
#'
#' @examples
#' knapsack_objects <- data.frame(
#'   w = sample(1:4000, size = 8, replace = TRUE),
#'   v = runif(n = 8, 0, 10000)
#' )
#' dynamic_knapsack(knapsack_objects, W = 3500)
#'
#' @export
dynamic_knapsack <- function(x, W) {
# 输入验证
if (!is.data.frame(x) || !all(c("v", "w") %in% names(x))) {
stop("Input must be a data frame with columns 'v' and 'w'.")
}
if (W <= 0) {
stop("Knapsack capacity must be greater than 0.")
}
if (any(x$v < 0) || any(x$w < 0) || any(is.na(x$w)) || any(is.na(x$v))) {
stop("Values and weights must not contain NA and must be non-negative.")
}
n <- nrow(x)  # 获取物品数量
dp <- matrix(0, nrow = n + 1, ncol = W + 1)  # 初始化 DP 表
# 填充 DP 表
# 填充 DP 表
for (i in 1:n) {
for (w in 0:W) {
if (x$w[i] <= w) {
# 不选择当前物品的值
value_without_item <- dp[i - 1, w + 1]
# 选择当前物品的值
value_with_item <- dp[i - 1, w - x$w[i] + 1] + x$v[i]
dp[i, w + 1] <- max(value_without_item, value_with_item)
} else {
dp[i, w + 1] <- dp[i - 1, w + 1]  # 当前物品无法放入背包
}
}
}
# 获取最佳价值和物品索引
best_value <- dp[n, W + 1]
best_combination <- integer(0)
w <- W
for (i in n:1) {
if (dp[i, w + 1] != dp[i - 1, w + 1]) {
best_combination <- c(best_combination, i)  # 存储物品索引
w <- w - x$w[i]  # 更新背包重量
}
}
return(list(value = best_value, elements = best_combination))
}
for (w in 0:W) {
if (x$w[i] <= w) {
# 不选择当前物品的值
value_without_item <- dp[i - 1, w + 1]
# 选择当前物品的值
value_with_item <- dp[i - 1, w - x$w[i] + 1] + x$v[i]
dp[i, w + 1] <- max(value_without_item, value_with_item)
} else {
dp[i, w + 1] <- dp[i - 1, w + 1]  # 当前物品无法放入背包
}
}
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
#' Solve the Knapsack Problem using Greedy Heuristic
#'
#' This function solves the knapsack problem using a greedy approach.
#' It selects items based on their value-to-weight ratio until the capacity is full.
#'
#' @param x A data frame with two columns: \code{v} for values and \code{w} for weights.
#'          Each row represents an item with a value and a weight.
#' @param W A positive numeric value representing the maximum weight capacity of the knapsack.
#'
#' @return A list with two elements:
#'   \item{value}{The total value of the items selected for the knapsack.}
#'   \item{elements}{The indices of the items in \code{x} that have been selected as numeric values.}
#'
#' @examples
#' set.seed(42)
#' knapsack_objects <- data.frame(
#'   w = sample(1:4000, size = 1200, replace = TRUE),
#'   v = runif(1200, 0, 10000)
#' )
#' greedy_knapsack(x = knapsack_objects, W = 2000)
#'
#' @export
greedy_knapsack <- function(x, W) {
# Input validation
if (!is.data.frame(x) || !all(c("v", "w") %in% names(x))) {
stop("Input must be a data frame with columns 'v' and 'w'.")
}
# Check if knapsack capacity is positive
if (W <= 0) {
stop("Knapsack capacity must be greater than 0.")
}
# Check if values and weights are non-negative
if (any(x$v < 0) || any(x$w < 0) || any(is.na(x$w)) || any(is.na(x$v))) {
stop("Values and weights must not contain NA and must be non-negative.")
}
# Calculate value-to-weight ratio
x$unit_value <- x$v / x$w
# Sort items by value-to-weight ratio in descending order
x <- x[order(-x$unit_value), ]
total_value <- 0  # Initialize total value
total_weight <- 0  # Initialize total weight
selected_items <- integer(0)  # Initialize selected items index
# Select items
for (i in 1:nrow(x)) {
if (total_weight + x$w[i] <= W) {  # If adding the current item doesn't exceed capacity
total_weight <- total_weight + x$w[i]  # Update total weight
total_value <- total_value + x$v[i]  # Update total value
selected_items <- c(selected_items, as.numeric(rownames(x)[i]))  # Record the selected item index as numeric
} else {
break  # If adding the current item exceeds capacity, stop selection
}
}
return(list(value = round(total_value), elements = selected_items))  # Return total value and selected item indices
}
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
source("~/workspace/github/knapsack/R/greedy_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
greedy_knapsack(x = knapsack_objects[1:800,], W = 3500)
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
devtools::load_all(".")
library(knapsack)
devtools::document()
library(usethis)
use_testthat()
source("~/workspace/github/knapsack/R/dynamic_knapsack.R")
set.seed(42, kind = "Mersenne-Twister", normal.kind = "Inversion")
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
dynamic_knapsack(x = knapsack_objects[1:8,], W = 3500)
